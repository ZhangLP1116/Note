python：
将两个字典组成一个新的字典
https://blog.csdn.net/sinat_38682860/article/details/80369388
创建字典时也可以用解析式，或用列表元组作为参数如：dict(zip(list1,list2))
zip():函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表
将两个列表组合成列表元组的形式，通常用于创建字典时使用
https://www.runoob.com/python/python-func-zip.html
list():
	A = '12345'
	print(list(A))
	>>['1', '2', '3', '4', '5']
字符串也是可迭代对象
tuple() 函数将列表转换为元组。
split()以指定的分隔符将字符串转换为列表
如：
	str = "Line1-abcdef \nLine2-abc \nLine4-abcd";
	print str.split( );       # 以空格为分隔符，包含 \n
	['Line1-abcdef', 'Line2-abc', 'Line4-abcd']
strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。

在Python3以后，字符串和bytes类型彻底分开了。字符串是以字符为单位进行处理的，bytes类型是以字节为单位处理的。
bytes对象只负责以二进制字节序列的形式记录所需记录的对象
	https://www.cnblogs.com/R-bear/p/7744454.html
eval（）：将字符串str当成有效的表达式来求值并返回计算结果
items（）：将字典以列表元祖形式返回【（键，值），（），（）】
hasattr(object, name)：判断一个对象里面是否有name属性或者name方法
join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串，也可以将列表转化为字符串。
	str = "-";
	seq = ("a", "b", "c"); # 字符串序列
	print str.join( seq );
	a-b-c
replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次
	str = "this is string example....wow!!! this is really string";
	print str.replace("is", "was");
	print str.replace("is", "was", 3);
	thwas was string example....wow!!! thwas was really string
	thwas was string example....wow!!! thwas is really string

os：
os.path模块主要用于文件的属性获取,exists是“存在”的意思，所以顾名思义，os.path.exists()就是判断括号里的文件是否存在的意思，括号内的可以是文件路径，默认是当前目录下。

os.mkdir(path)，他的功能是一级一级的创建目录，前提是前面的目录已存在
	import os


isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()但有所不同。
>>>a = 2
>>> isinstance (a,int)
True
>>> isinstance (a,str)
False
>>> isinstance (a,(str,int,list))    # 是元组中的一个返回 True
True
详细网址：http://www.runoob.com/python/python-func-isinstance.html
 
	os.mkdir('d:\hello')    #  正常
	os.mkdir('d:\hello\hi') #  正常
	#  如果d:\hello目录不存在
	#  则os.mkdir('d:\hello\hi')执行失败
os.makedirs(path)，他可以一次创建多级目录，哪怕中间目录不存在也能正常的（替你）创建
	import os
 
	os.makedirs('d:\hello')    #  正常
	os.makedirs('d:\hello\hi') #  正常
	#  如果d:\hello目录不存在
	#  则os.mkdir('d:\hello\hi')  #  仍然正常


异常
try:
	resp = requests.get(url)
except requests.ConnectionError as e:
	print('Error', e.agrs)
查看异常信息

目标网站服务器ip获取方法：
1：ping 目标网站域名	如：ping www.mzitu.com
2：可以去专门的ip获取网站查询	如：https://www.ipaddress.com/、http://tool.chinaz.com/此可以获取所有服务器的IP


requests库：
head：
得到服务器返回给我们的响应头部信息，可以这样做：
 r = requests.get('http://httpbin.org')
r.headers
得到发送到服务器的请求的头部
r.request.headers
python requests用法总结：https://www.cnblogs.com/lilinwei340/p/6417689.html
			https://www.cnblogs.com/Security-Darren/p/4192566.html#m4
			https://blog.csdn.net/iloveyin/article/details/21444613
会话（Session）：
会话的属性会给请求方法提供缺省数据。
如：
	session.headers.update({'x-test': 'true'})
	session.get(url)
	那么调用get方法时它会带上headers属性去请求

方法层的参数覆盖会话的参数。
如：s.get('http://httpbin.org/headers', headers={'x-test2': 'true'})
	这里会优先使用传递过来的参数而不是用session.headers的值

就算使用了会话，方法级别的参数也不会被跨请求保持。下面的例子只会和第一个请求发送 cookie ，而非第二个：
s = requests.Session()
r = s.get('http://httpbin.org/cookies', cookies={'from-my': 'browser'})
print(r.text)
# '{"cookies": {"from-my": "browser"}}'
r = s.get('http://httpbin.org/cookies')
print(r.text)
# '{"cookies": {}}'
所以为会话对象的属性提供数据，比直接传递参数，要更加有效的使用会话会对象。

https://blog.csdn.net/qq_18863573/article/details/52775130
http://docs.python-requests.org/en/master/user/advanced/#prepared-requests

设置cookie的方式：
1、一般cookie的设置
	直接用Session对象访问一次网页就会自动保存cookie信息
2、登陆情况下cookie的设置
	一、手动登陆后在把cookie的内容复制，在手动设置session对象的头属性
	二、模拟登陆自动获取cookie信息


生成器（Generator）
我们讲过，generator保存的是算法，每次调用next()，就计算出下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误。
当然，上面这种不断调用next()方法实在是太变态了，正确的方法是使用for循环，因为generator也是可迭代对象
最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行
生成器函数：生成器函数不能直接调用因为用了yield关键字后它就是一个生成器而不是一个函数，这里生成器的内容保存的是函数的内容，当你传递参数给它调用是会报错提示它是一个生成器.
如：
def fib(max):
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        a, b = b, a + b
        n = n + 1
>>> fib(6)
<generator object fib at 0x104feaaa0>
它只能通过历遍去获取结果 如：for i in fib(6):
生成器函数可以，生成器中已经保存了一个个你想要的结果，接下来只需要去历遍它就可以拿到其内部的每一个结果。
参考资料：https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138681965108490cb4c13182e472f8d87830f13be6e88000
https://www.cnblogs.com/wj-1314/p/8490822.html

pickle：
用于python特有的类型和python的数据类型间进行转换
所有python支持的原生类型：布尔值，整数，浮点数，复数，字符串，字节，None。
由任何原生类型组成的列表，元组，字典和集合。
函数，类，类的实例
pickle.dumps(obj)：以字节对象形式返回封装的对象，不需要写入文件中
pickle.loads(bytes_object): 从字节对象中读取被封装的对象，并返回
pickle模块可能出现三种异常：
1. PickleError：封装和拆封时出现的异常类，继承自Exception
2. PicklingError: 遇到不可封装的对象时出现的异常，继承自PickleError
3. UnPicklingError: 拆封对象过程中出现的异常，继承自PickleError
https://www.cnblogs.com/lincappu/p/8296078.html

selenium：
用Keys()类模拟键盘操作
browser.refresh()  #刷新页面
https://www.cnblogs.com/jasontang369/p/9220617.html
最大化：browser.maximize_window()
元素是否显示：element.is_enabled()
selenium对于网站自动弹出的网页是不会自动进入的，需要用句柄进入browser.switch_to.window(sogou_handle)
句柄：selenium中打开的每一个网页都有自己的句柄
	browser.window_handles# 获取当前所有窗口句柄集合（列表类型）
	browser.current_window_handle# 获取所在窗口的句柄
	driver.switch_to_window(driver.window_handles[-1])进入列表里最后一个窗口
https://www.cnblogs.com/NancyRM/p/8214413.html
https://blog.csdn.net/mouday/article/details/81240257
获取元素属性值：self.browser.find_element_by_id('playButton').get_attribute('class')
鼠标操作：https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.touch_actions
	https://www.cnblogs.com/jasontang369/p/9212381.html
Selenium Python3 请求头配置：https://blog.csdn.net/weixin_42020284/article/details/84853103

文件写入操作
f.write()参数为一个字符串
语法：fileObject.write( [ str ])